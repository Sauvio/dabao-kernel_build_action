name: Build Kernel
on:
  push:
    branches: OPlus8T-r130

  workflow_dispatch:
  
jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      kernel-url: https://github.com/Sauvio/OPlus8T_bluspark.git
      kernel-dir: kernel
      branch: master
      config: blu_spark_defconfig
      arch: arm64
      aosp-gcc: false
      aosp-clang: true
      ksu: true
      ksu-version: v0.7.1
      anykernel3: true
      android-version: 11
      aosp-clang-version: r450784d
      python-27: true
      disable-lto: true
      kprobes: false
      overlayfs: true
      lxc: false
      lxc-patch: false
    steps:
      - uses: actions/checkout@v3
      - id: cleanup
        uses: rokibhasansagar/slimhub_actions@main
        
      - name: install package
        shell: bash
        run: sudo apt install -y binutils binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3
  
      - name: download aosp-gcc
        shell: bash
        if: env.aosp-gcc == 'true'
        run: |
          if [ ${{ env.aosp-clang }} = true ]; then
              mkdir -p -v $HOME/gcc-64
              wget -q -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
              tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
              mkdir -p -v $HOME/gcc-32
              wget -q -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
              tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
          else
              git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ --depth=1 -b android${{ env.android-version }}-release $HOME/gcc-64
              git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ --depth=1 -b android${{ env.android-version }}-release $HOME/gcc-32
          fi
  
      - name: download Android-NDK
        if: env.android-ndk == 'true'
        shell: bash
        run: |
          if [ ${{ env.aosp-gcc }} = false ]; then
              echo
              if [ ${{ env.android-ndk-x64 }} = false ]; then
                  wget -q -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-${{ env.android-ndk-version }}-linux.zip
                  unzip -q -d $HOME android-ndk.zip
              else
                  wget -q -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-${{ env.android-ndk-version }}-linux-x86_64.zip
                  unzip -q -d $HOME android-ndk.zip
              fi
              echo
          else
              echo "Please disable aosp-gcc and aosp-clang."
              exit 127
          fi
          
          export HOMES=$(pwd) 
          export LLVMS=$HOME/android-ndk-${{ env.android-ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64/bin
          cd $LLVMS
          for file in $(ls llvm-*); do
          ln -s "$file" "aarch64-linux-android$(( ${{ env.android-version }} + 19 ))-${file#llvm-}"
          done
          cd $HOMES
  
  
      - name: use python 2.7
        if: env.python-27 == 'true'
        run: |
          sudo apt install -y -q python2.7 python2.7-minimal
          sudo rm /bin/python
          sudo ln -s /bin/python2.7 /bin/python
          sudo ln -s /bin/python2.7 /bin/python2
        shell: bash
  
      - name: download aosp clang
        if: env.aosp-clang == 'true'
        run: |
          if [ ${{ env.aosp-gcc }} = true ]; then
              mkdir $HOME/clang -p -v 
              wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android${{ env.android-version }}-release/clang-${{ env.aosp-clang-version }}.tar.gz
              tar -C $HOME/clang -zxf clang-${{ env.aosp-clang-version }}.tar.gz
          else
              mkdir $HOME/clang -p -v 
              wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android13-release/clang-r450784d.tar.gz
              tar -C $HOME/clang -zxf clang-${{ env.aosp-clang-version }}.tar.gz
              mkdir -p -v $HOME/gcc-64
              wget -q -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
              tar -C $HOME/gcc-64 -zxf gcc-aarch64.tar.gz
              mkdir -p -v $HOME/gcc-32
              wget -q -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
              tar -C $HOME/gcc-32 -zxf gcc-arm.tar.gz
          fi
        shell: bash
  
      - name: pull kernel source from selected branch
        run: |
          git clone ${{ env.kernel-url }} -b "${{ env.branch }}" --depth=1 ${{ env.kernel-dir }}
          cd ${{ env.kernel-dir }}
        shell: bash
  
      - name: pull vendor source
        if: env.vendor == 'true'
        run: |
          git clone ${{ env.vendor-url }} --depth=1 ${{ env.vendor-dir }}
        shell: bash
  
      - name: Setup ccache 
        if: env.ccache == 'true' 
        uses: hendrikmuhs/ccache-action@v1.2 
        with: 
          key: build-kernel-${{ env.arch }}${{ env.config }} 
          max-size: 4G
  
      - name: Set swap space
        uses: pierotofy/set-swap-space@master 
        with: 
          swap-size-gb: 12
     
      - name: pull kernelsu
        if: env.ksu == 'true'
        run: |
          cd ${{ env.kernel-dir }}
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.ksu-version }}
        shell: bash
  
      - name: disable lto
        if: env.disable-lto == 'true'
        shell: bash
        run: |
          cd ${{ env.kernel-dir }}
          if grep -q "LTO" "arch/${{ env.arch }}/configs/${{ env.config }}"
          then
               sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.arch }}/configs/${{ env.config }} 
               sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.arch }}/configs/${{ env.config }} 
               sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.arch }}/configs/${{ env.config }} 
               echo "CONFIG_LTO_NONE=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          fi
      - name: enable kprobes
        if: env.kprobes == 'true'
        shell: bash
        run: |
          cd ${{ env.kernel-dir }}
          echo "CONFIG_MODULES=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          echo "CONFIG_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          
      - name: disable kprobes
        if: env.kprobes == 'false'
        shell: bash
        run: |
          cd ${{ env.kernel-dir }}
          sed -i '/CONFIG_KPROBES=y/d' arch/${{ env.arch }}/configs/${{ env.config }}
          sed -i '/CONFIG_HAVE_KPROBES=y/d' arch/${{ env.arch }}/configs/${{ env.config }}
          sed -i '/CONFIG_KPROBE_EVENTS=y/d' arch/${{ env.arch }}/configs/${{ env.config }}
      
      - name: enable overlayfs
        if: env.overlayfs == 'true'
        shell: bash
        run: |
          cd ${{ env.kernel-dir }}
          grep -q "OVERLAY_FS" "arch/${{ env.arch }}/configs/${{ env.config }}" || echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          
      - name: enable kvm
        if: env.kvm == 'true'
        shell: bash
        run: |
          cd ${{ env.kernel-dir }}
          echo "CONFIG_VIRTUALIZATION=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          echo "CONFIG_KVM=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          echo "CONFIG_KVM_MMIO=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          echo "CONFIG_KVM_ARM_HOST=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
  
      - name: enable lxc
        if: env.lxc == 'true'
        shell: bash
        run: |
           cd ${{ env.kernel-dir }}
           wget https://github.com/wu17481748/lxc-docker/raw/main/LXC-DOCKER-OPEN-CONFIG.sh
           bash LXC-DOCKER-OPEN-CONFIG.sh ${{ env.config }} -w
           if [ ${{ env.lxc-patch }} = true ]; then
               wget https://github.com/wu17481748/lxc-docker/raw/main/lxc.patch
               git apply lxc.patch
           else
               echo skip lxc patch
           fi
  
      - name: build kernel with clang
        if: env.aosp-clang == 'true'
        run: |
          cd ${{ env.kernel-dir }}
          mkdir -p -v out
          export CLANG_PATH=$HOME/clang
          export PATH=$CLANG_PATH/bin:$PATH
          make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ env.arch }} O=out ${{ env.config }}
          if [ ${{ env.ccache }} = true ]; then
              export USE_CCACHE=1
              make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC="ccache clang" ARCH=${{ env.arch }} O=out ${{ env.extra-cmd }}
          else
              make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- CLANG_TRIPLE=aarch64-linux-gnu- CC=clang ARCH=${{ env.arch }} O=out ${{ env.extra-cmd }}
          fi
        shell: bash
  
      - name: build kernel with gcc
        if: env.aosp-gcc == 'true'
        run: |
          if [ ${{ env.aosp-clang }} = false ]; then
              cd ${{ env.kernel-dir }}
              mkdir -p -v out
              make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- ARCH=${{ env.arch }} O=out ${{ env.config }}
              make -j$(nproc --all) CROSS_COMPILE=$HOME/gcc-64/bin/aarch64-linux-android- COMPILE_ARM32=$HOME/gcc-32/bin/arm-linux-androideabi- ARCH=${{ env.arch }} O=out ${{ env.extra-cmd }} 
          else
              echo 
          fi
              
        shell: bash
  
      - name: build kernel with android-ndk
        if: env.android-ndk == 'true'
        shell: bash
        run: |
          cd ${{ env.kernel-dir }}
          mkdir -p -v out
          export CLANG_PATH=$HOME/android-ndk-${{ env.android-ndk-version }}/toolchains/llvm/prebuilt/linux-x86_64
          export PATH=$CLANG_PATH/bin:$PATH
          make -j$(nproc --all) CROSS_COMPILE=$CLANG_PATH/bin/llvm- COMPILE_ARM32=$CLANG_PATH/bin/llvm- CLANG_TRIPLE=aarch64-linux-android$(( ${{ env.android-version }} + 19 ))- CC=clang ARCH=${{ env.arch }} O=out ${{ env.config }}
          if [ ${{ env.ccache }} = true ]; then
              export USE_CCACHE=1
              make -j$(nproc --all) CROSS_COMPILE=$CLANG_PATH/bin/llvm- COMPILE_ARM32=$CLANG_PATH/bin/llvm- CLANG_TRIPLE=aarch64-linux-android$(( ${{ env.android-version }} + 19 ))- CC="ccache clang" ARCH=${{ env.arch }} O=out ${{ env.extra-cmd }}
          else
              make -j$(nproc --all) CROSS_COMPILE=$CLANG_PATH/bin/llvm- COMPILE_ARM32=$CLANG_PATH/bin/llvm- CLANG_TRIPLE=aarch64-linux-android$(( ${{ env.android-version }} + 19 ))- CC=clang ARCH=${{ env.arch }} O=out ${{ env.extra-cmd }}
          fi
        
  
      - name: copy kernel
        if: env.anykernel3 == 'false'
        shell: bash
        run: |
          mkdir -p -v build
          if [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb build -rv
          elif [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* build -rv
          else
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image build -rv
          fi
  
      - name: package with anykernel3
        if: env.anykernel3 == 'true'
        run: | 
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          echo $(pwd)
          if [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb AnyKernel3 -rv
          elif [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* AnyKernel3 -rv
          else
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image AnyKernel3 -rv
          fi
  
          test -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/dtbo.img && cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/dtbo.img AnyKernel3/
          
          rm -rf AnyKernel3/.git* AnyKernel3/README.md
        shell: bash
  
      - id: uploadi
        if: env.anykernel3 == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: bare-compiled-kernel
          path: build/*
  
      - id: uploada
        if: env.anykernel3 == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: AnyKernel3-flasher
          path: AnyKernel3/*
