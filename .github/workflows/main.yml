name: Build Kernel
on:
  push:
    branches: OPlus8T-OOS11-horizon

  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      kernel-url: https://github.com/Sauvio/libxzr-android_kernel_oneplus_sm8250.git
      kernel-dir: kernel
      branch: oos11-ksu
      config: kebab_defconfig
      arch: arm64
      custom-clang: true
      clang-url: https://storage.xzr.moe/horizon-clang/Horizon-Clang-16.0.6.tar.xz
      ksu: true
      ksu-version: v0.7.1
      anykernel3: true
      python-27: true
      disable-lto: true
    steps:
      - id: cleanup
        uses: rokibhasansagar/slimhub_actions@main

      - name: install package
        shell: bash
        run: |
          sudo apt-get install libncurses5-dev libncurses-dev libssl-dev device-tree-compiler bc cpio lib32ncurses5-dev lib32z1 build-essential binutils bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip gzip xz-utils zlib1g-dev git
          sudo apt-get update
          sudo apt install gcc

      - name: use python 2.7
        if: env.python-27 == 'true'
        run: |
          sudo apt install -y -q python2.7 python2.7-minimal
          sudo rm /bin/python
          sudo ln -s /bin/python2.7 /bin/python
          sudo ln -s /bin/python2.7 /bin/python2
        shell: bash

      - name: download custom clang
        if: env.custom-clang == 'true'
        run: |
          mkdir $HOME/clang -p -v
          OUTPUT_FILE="custom-clang.tar.gz"
          EXTRACTION_DIR="$HOME/clang"
          wget -q ${{ env.clang-url}} -O $OUTPUT_FILE
          if tar -tf $OUTPUT_FILE &> /dev/null; then
            tar -xf $OUTPUT_FILE -C "$EXTRACTION_DIR"
          elif file $OUTPUT_FILE | grep -q "gzip compressed data"; then
            tar -xzf $OUTPUT_FILE -C "$EXTRACTION_DIR"
          elif file $OUTPUT_FILE | grep -q "XZ compressed data"; then
            tar -xf $OUTPUT_FILE -C "$EXTRACTION_DIR"
          else
            echo "Unknown compression format or unsupported file"
          fi
        shell: bash

      - name: pull kernel source from selected branch
        run: |
          git clone ${{ env.kernel-url }} -b "${{ env.branch }}" --depth=1 ${{ env.kernel-dir }}
          cd ${{ env.kernel-dir }}
          git submodule init
          git submodule update
        shell: bash

      - name: Setup ccache
        if: env.ccache == 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.arch }}${{ env.config }}
          max-size: 4G

      - name: Set swap space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      - name: pull kernelsu
        if: env.ksu == 'true'
        run: |
          cd ${{ env.kernel-dir }}
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.ksu-version }}
        shell: bash

      - name: disable lto
        if: env.disable-lto == 'true'
        shell: bash
        run: |
          cd ${{ env.kernel-dir }}
          if grep -q "LTO" "arch/${{ env.arch }}/configs/${{ env.config }}"
          then
               sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.arch }}/configs/${{ env.config }}
               sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.arch }}/configs/${{ env.config }}
               sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.arch }}/configs/${{ env.config }}
               echo "CONFIG_LTO_NONE=y" >> arch/${{ env.arch }}/configs/${{ env.config }}
          fi

      - name: build kernel with clang
        if: env.custom-clang == 'true'
        run: |
          cd ${{ env.kernel-dir }}
          mkdir -p -v out
          export CLANG_PATH=$HOME/clang
          export PATH=$CLANG_PATH/bin:$PATH
          make -j$(nproc --all) \
               CROSS_COMPILE=${CLANG_PATH}/bin/aarch64-linux-android- \
               CROSS_COMPILE_COMPAT=${CLANG_PATH}/bin/arm-linux-gnueabi- \
               CLANG_TRIPLE=aarch64-linux-gnu- \
               CC=${CLANG_PATH}/bin/clang \
               ARCH=${{ env.arch }} \
               AR=${CLANG_PATH}/bin/llvm-ar \
               NM=${CLANG_PATH}/bin/llvm-nm \
               LLVM_AR=${CLANG_PATH}/bin/llvm-ar \
               LLVM_NM=${CLANG_PATH}/bin/llvm-nm \
               OBJCOPY=${CLANG_PATH}/bin/llvm-objcopy \
               OBJDUMP=${CLANG_PATH}/bin/llvm-objdump \
               STRIP=${CLANG_PATH}/bin/llvm-strip \
               LD=${CLANG_PATH}/bin/ld.lld \
               O=out \
               ${{ env.config }}
          if [ ${{ env.ccache }} = true ]; then
              make -j$(nproc --all) \
                   CROSS_COMPILE=${CLANG_PATH}/bin/aarch64-linux-android- \
                   CROSS_COMPILE_COMPAT=${CLANG_PATH}/bin/arm-linux-gnueabi- \
                   CLANG_TRIPLE=aarch64-linux-gnu- \
                   CC="ccache ${CLANG_PATH}/bin/clang" \
                   ARCH=${{ env.arch }} \
                   AR=${CLANG_PATH}/bin/llvm-ar \
                   NM=${CLANG_PATH}/bin/llvm-nm \
                   LLVM_AR=${CLANG_PATH}/bin/llvm-ar \
                   LLVM_NM=${CLANG_PATH}/bin/llvm-nm \
                   OBJCOPY=${CLANG_PATH}/bin/llvm-objcopy \
                   OBJDUMP=${CLANG_PATH}/bin/llvm-objdump \
                   STRIP=${CLANG_PATH}/bin/llvm-strip \
                   LD=${CLANG_PATH}/bin/ld.lld \
                   O=out \
                   ${{ env.extra-cmd}}
          else
              make -j$(nproc --all) \
                   CROSS_COMPILE=${CLANG_PATH}/bin/aarch64-linux-android- \
                   CROSS_COMPILE_COMPAT=${CLANG_PATH}/bin/arm-linux-gnueabi- \
                   CLANG_TRIPLE=aarch64-linux-gnu- \
                   CC=${CLANG_PATH}/bin/clang \
                   ARCH=${{ env.arch }} \
                   AR=${CLANG_PATH}/bin/llvm-ar \
                   NM=${CLANG_PATH}/bin/llvm-nm \
                   LLVM_AR=${CLANG_PATH}/bin/llvm-ar \
                   LLVM_NM=${CLANG_PATH}/bin/llvm-nm \
                   OBJCOPY=${CLANG_PATH}/bin/llvm-objcopy \
                   OBJDUMP=${CLANG_PATH}/bin/llvm-objdump \
                   STRIP=${CLANG_PATH}/bin/llvm-strip \
                   LD=${CLANG_PATH}/bin/ld.lld \
                   O=out \
                   ${{ env.extra-cmd}}
          fi
        shell: bash

      - name: copy kernel
        if: env.anykernel3 == 'false'
        shell: bash
        run: |
          mkdir -p -v build
          if [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb build -rv
          elif [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* build -rv
          else
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image build -rv
          fi

      - name: package with anykernel3
        if: env.anykernel3 == 'true'
        run: |
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          echo $(pwd)
          if [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.*-dtb AnyKernel3 -rv
          elif [ -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* ]; then
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image.* AnyKernel3 -rv
          else
             cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/Image AnyKernel3 -rv
          fi

          test -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/dtbo.img && cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/dtbo.img AnyKernel3/
          test -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/dts/vendor/qcom/kona-v2.1.dtb && cp ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/dts/vendor/qcom/kona-v2.1.dtb AnyKernel3/dtb
          test -f ${{ env.kernel-dir }}/out/arch/${{ env.arch }}/boot/dts/vendor/qcom/instantnoodle-t0.dtb && cp ${{ env.kernel-dir }} /out/arch/${{ env.arch }}/boot/dts/vendor/qcom/instantnoodle-t0.dtb AnyKernel3/dtb
          rm -rf AnyKernel3/.git* AnyKernel3/README.md
        shell: bash

      - id: uploadi
        if: env.anykernel3 == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: bare-compiled-kernel
          path: build/*

      - id: uploada
        if: env.anykernel3 == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: AnyKernel3-flasher
          path: AnyKernel3/*
